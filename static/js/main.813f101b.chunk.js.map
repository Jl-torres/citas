{"version":3,"sources":["Components/Formularios/formulario.js","Components/Listado-citas/citas.js","Components/App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuidv4","type","placeholder","onChange","Cita","eliminarCita","onClick","prototype","PropTypes","func","isRequired","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","titulo","length","useEffect","setItem","stringify","nuevasCitas","filter","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.813f101b.chunk.js","sourcesContent":["import React, {Fragment, useState} from 'react';\nimport './formulario.css';\nimport {v4 as uuidv4} from 'uuid';\n\n\nconst Formulario = ({crearCita}) => {\n\n    //States    \n   const [cita, actualizarCita] = useState({\n        mascota:'',\n        propietario:'',\n        fecha:'',\n        hora:'',\n        sintomas:'',\n    });\n\n    const [error, actualizarError]=useState(false)\n\n    //Funcion\n\n    const actualizarState = e => {\n        actualizarCita({\n         ...cita,\n         [e.target.name]: e.target.value\n        })\n    }\n\n    //Valores\n    \n    const{mascota, propietario, fecha, hora, sintomas}= cita\n\n    //Agregar Cita\n\n    const submitCita = e => {\n        e.preventDefault();\n       //Validacion\n       if(\n        mascota.trim() === '' ||\n        propietario.trim() === '' ||\n        fecha.trim() === '' ||\n        hora.trim() === '' ||\n        sintomas.trim() === '' \n        )\n       {\n           actualizarError(true);\n           return;\n       } \n\n       actualizarError(false);\n\n      //Id\n       cita.id= uuidv4(); \n      //Crear Cita\n       crearCita(cita);\n     //actualizar Cita\n     actualizarCita({\n        mascota:'',\n        propietario:'',\n        fecha:'',\n        hora:'',\n        sintomas:'',\n     })\n\n    }\n\n    return (\n        <Fragment>\n            <h2>Crear Cita</h2> \n\n            {error ? \n            <p className=\"alerta\"> TODOS LOS CAMPOS SON OBLIGATORIOS</p>\n          : null}\n           \n            <form onSubmit={submitCita}>\n                <label>Nombre Mascota</label>\n                <input\n                type=\"text\"\n                name=\"mascota\"\n                placeholder=\"Nombre Mascota\"\n                className=\"input\"\n                onChange={actualizarState}\n                value={mascota}\n                />\n\n            <label>Nombre del Dueño</label>\n                <input\n                type=\"text\"\n                name=\"propietario\"\n                placeholder=\"Nombre del Dueño\"\n                className=\"input\"\n                onChange={actualizarState}\n                value={propietario}\n                /> \n\n         <label>Fecha</label>\n                <input\n                type=\"date\"\n                name=\"fecha\"\n                className=\"input\"\n                onChange={actualizarState}\n                value={fecha}\n                /> \n\n             <label>Hora</label>\n                <input\n                type=\"time\"\n                name=\"hora\"\n                className=\"input\"\n                onChange={actualizarState}\n                value={hora}\n                /> \n\n            <label>Sintomas</label>\n            <textarea\n            className=\"input textarea\"\n            name=\"sintomas\"\n            onChange={actualizarState}\n            value={sintomas} >   \n            </textarea>\n            <button \n            type=\"submit\"\n            className=\"boton-formulario\">\n                Agregar Cita\n            </button >\n        \n\n            </form>\n        </Fragment>\n    );\n}\n\n/*formulario.propTypes = {\n    \n};*/\n\nexport default Formulario;\n\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './citas.css';\n\nconst Cita = ({cita, eliminarCita}) => {\n    return (\n\n        <div className=\"cita\">\n           <p><span>Mascota:</span> {cita.mascota}</p>\n           <p><span>Propietario:</span> {cita.propietario}</p>\n           <p><span>Fecha:</span> {cita.fecha}</p>\n           <p><span>Hora:</span> {cita.hora}</p>\n           <p><span>Sintomas:</span> {cita.sintomas}</p>\n        \n        <button \n        className=\"boton\"\n        onClick={() => eliminarCita(cita.id) }>\n        Eliminar &times;</button>\n        </div>\n       \n       \n    );\n};\n\nCita.propTypes= {\n    cita: PropTypes.object.isRequired,\n    eliminarCita:PropTypes.func.isRequired,\n}\n\nexport default Cita;","import React, {Fragment, useState, useEffect} from 'react';\nimport Formulario from './Formularios/formulario'\nimport Cita from './Listado-citas/citas'\nimport PropTypes from 'prop-types';\nimport './App.css';\n\nfunction App() {\n\n  //Almacenar citas en local Storage\n   let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n   if(!citasIniciales) {\n     citasIniciales=[]\n   }\n  //Guardar citas\n  const [citas, guardarCitas] = useState(citasIniciales);\n  //Agregar Citas\n  const crearCita = cita => {\n    guardarCitas([\n      ...citas,\n        cita\n    ]);\n  }\n  //mensaje condicional\n\n  const titulo = citas.length === 0 ? 'No hay Citas' : 'Administra tus Citas';\n\n  //useEffect\n  useEffect(() => {\n    if(citasIniciales){\n      localStorage.setItem('citas' , JSON.stringify(citas))\n    } else {\n      localStorage.setItem('citas', JSON.stringify([]))\n    };\n  }, [citas, citasIniciales])\n\n  //Funcion para eliminar citas\n\n  const eliminarCita= id =>{\n    const nuevasCitas = citas.filter(cita => cita.id !== id);\n    guardarCitas(nuevasCitas)\n  }\n\n  return (\n    <Fragment>\n     <h1 className=\"titulo-app\">Administrador de Pacientes.</h1>\n     <div className=\"container\">\n     <div className=\"row\">\n      \n     <div className=\"cold-md-6\">      \n      <Formulario \n      crearCita={crearCita}/>\n     </div>\n\n     <div className=\"cold-md-6\">\n       <h2> {titulo}</h2>\n       {citas.map(cita => (\n          <Cita\n          key={cita.id}\n          cita={cita}\n          eliminarCita={eliminarCita}\n          />\n       ))}\n    \n     </div>\n\n     </div>\n     </div>\n    </Fragment>\n  );\n}\n\nFormulario.prototype={\n  crearCita: PropTypes.func.isRequired\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}